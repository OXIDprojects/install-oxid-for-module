#!/usr/bin/env bash

OXID=${OXID:-6.0}

DB_HOST=${DB_HOST:-127.0.0.1}
DB_NAME=${DB_NAME:-oxid}
DB_USER=${DB_USER:-root}
DB_PWD=${DB_PWD:-}
SHOP_URL=${SHOP_URL:-http://127.0.0.1}
SHOP_LOG_LEVEL=${SHOP_LOG_LEVEL:-info}

if [ -n "$TRAVIS" ]; then
  CI_SYSTEM="travis_ci"
fi
if [ -n "$GITLAB_CI" ]; then
  CI_SYSTEM="gitlab_ci"
fi

if [ -z $CI_SYSTEM ]; then
   echo "warn: CI_SYSTEM couldn't be detected";
   echo "currently supported CI systems:";
   echo "travis, gitlab-ci";
   CI_SYSTEM="unknown-ci"
fi

TARGET_PATH=$(grep '"target-directory":' composer.json | awk -F'"' '{print $4}')
PACKAGE_NAME=$(grep '"name":' composer.json | awk -F'"' '{print $4}')
BUILD_DIR=$(pwd)

cd ~/ || exit
mkdir -p OXID
cd OXID || exit
OXID_PATH=$(pwd)
echo "installing OXID version ${OXID} on ${CI_SYSTEM} in path $OXID_PATH"


composer create-project --no-interaction oxid-esales/oxideshop-project . dev-b-"${OXID}"-ce
sed -i -e "s@<dbHost>@${DB_HOST}@g; s@<dbName>@${DB_NAME}@g; s@<dbUser>@${DB_USER}@g; s@<dbPwd>@${DB_PWD}@g" source/config.inc.php
sed -i -e "s@<sShopURL>@${SHOP_URL}@g; s@sLogLevel = 'error'@sLogLevel = '${SHOP_LOG_LEVEL}'@g" source/config.inc.php
sed -i -e "s@<sShopDir>@${OXID_PATH}/source@g; s@<sCompileDir>@${OXID_PATH}/source/tmp@g" source/config.inc.php
sed -i -e "s@partial_module_paths: null@partial_module_paths: ${TARGET_PATH}@g" test_config.yml
sed -i -e "s@run_tests_for_shop: true@run_tests_for_shop: false@g" test_config.yml
#cat test_config.yml

#just in case the module has private dependencies clone them into the oxid project
php -r "
\$repositories=json_decode(file_get_contents('$BUILD_DIR/composer.json'),true)['repositories'];
if(! empty(\$repositories)) {
  \$c=json_decode(file_get_contents('composer.json'), true);
  \$data=array_merge(['repositories'=>\$repositories],\$c);
  file_put_contents('composer.json', json_encode(\$data, JSON_PRETTY_PRINT));
}"
composer config minimum-stability dev
#Module Registrieren
#composer config repo.packagist false
echo "installing ${PACKAGE_NAME} in ${TARGET_PATH}"
composer config repositories.build path "${BUILD_DIR}"
if [ -n $COMPOSER_CLEAR_CACHE ]; then
    composer clear-cache
fi
composer require "${PACKAGE_NAME}:*"
